// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package camera

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x4b, 0xcc, 0xd4, 0xcb, 0x4d,
	0x2d, 0x49, 0x2c, 0xc9, 0xc8, 0xcc, 0x4b, 0x2f, 0xd6, 0x4b, 0xce, 0xcf, 0x2d, 0xc8, 0xcf, 0x4b,
	0xcd, 0x2b, 0xd1, 0x83, 0x29, 0x4b, 0x4e, 0xcc, 0x4d, 0x2d, 0x4a, 0x94, 0x92, 0x4e, 0xcf, 0xcf,
	0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xeb, 0x4a, 0x2a, 0x4d, 0xd3, 0x4f, 0xcd, 0x2d, 0x28, 0xa9, 0x84,
	0x18, 0x62, 0xd4, 0xc2, 0xc8, 0xc5, 0xeb, 0x0c, 0x56, 0x17, 0x0c, 0xd1, 0x25, 0x64, 0xc9, 0xc5,
	0x1a, 0x5c, 0x92, 0x58, 0x54, 0x22, 0x24, 0xa6, 0x07, 0xd1, 0xa8, 0x07, 0xd3, 0xa8, 0xe7, 0x0a,
	0xd2, 0x28, 0x85, 0x43, 0x5c, 0x89, 0x41, 0xc8, 0x82, 0x8b, 0x25, 0xb8, 0x24, 0xbf, 0x80, 0x74,
	0x9d, 0x4e, 0x1c, 0x51, 0x6c, 0x10, 0xd7, 0x26, 0xb1, 0x81, 0xe5, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x43, 0x34, 0x04, 0x1c, 0xed, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CameraServiceClient is the client API for CameraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CameraServiceClient interface {
	Start(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cameraServiceClient struct {
	cc *grpc.ClientConn
}

func NewCameraServiceClient(cc *grpc.ClientConn) CameraServiceClient {
	return &cameraServiceClient{cc}
}

func (c *cameraServiceClient) Start(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.component.service.camera.CameraService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ai.metathings.component.service.camera.CameraService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServiceServer is the server API for CameraService service.
type CameraServiceServer interface {
	Start(context.Context, *empty.Empty) (*empty.Empty, error)
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterCameraServiceServer(s *grpc.Server, srv CameraServiceServer) {
	s.RegisterService(&_CameraService_serviceDesc, srv)
}

func _CameraService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.component.service.camera.CameraService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).Start(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.metathings.component.service.camera.CameraService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CameraService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai.metathings.component.service.camera.CameraService",
	HandlerType: (*CameraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _CameraService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _CameraService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
